@page "/docs/components/accordion"
@layout DocsContentLayout

@using LumexUI.Docs.Client.Pages.Components.Accordion.PreviewCodes

<DocsCompositionSection Components="@_compositionComponents" />

<DocsSection Title="Usage">
    <Usage />

    <DocsSection Title="Disabled">
        <p>Use the <code>Disabled</code> parameter to disable the accordion.</p>
        <Disabled />

        <p>Alternatively, use the <code>DisabledItems</code> parameter to disable specific accordion items.</p>
        <DisabledItems />
    </DocsSection>

    <DocsSection Title="Expanded">
        <p>Use the <code>Expanded</code> parameter to make the accordion expanded.</p>
        <Expanded />

        <p>Alternatively, use <code>ExpandedItems</code> parameter to expand specific accordion items.</p>
        <ExpandedItems />
    </DocsSection>

    <DocsSection Title="Multiple">
        <p>
            By default, only one accordion item can be expanded at a time.
            Use the <code>SelectionMode</code> parameter to control the selection behaviour of the accordion.
        </p>
        <Multiple />
    </DocsSection>

    <DocsSection Title="Variants">
        <p>
            Use the <code>Variant</code> parameter to set different visual styles of the accordion,
            such as <code>Light</code>, <code>Shadow</code>, <code>Bordered</code> or <code>Splitted</code>.
        </p>
        <Variants />
    </DocsSection>

    <DocsSection Title="Subtitle">
        <p>
            Use the <code>Subtitle</code> or <code>SubtitleContent</code> parameters to
            provide additional context for accordion items.
        </p>
        <Subtitle />
    </DocsSection>

    <DocsSection Title="Start content">
        <p>
            Use the <code>StartContent</code> parameter to
            insert additional content at the beginning of accordion items.
        </p>
        <StartContent />
    </DocsSection>

    <DocsSection Title="Custom indicator">
        <p>
            Use the <code>IndicatorContent</code> parameter to
            customize the default indicator icon of accordion items.
        </p>
        <CustomIndicator />

        <p>The indicator icon can be controlled based on the expanded state of the accordion item:</p>
        <CustomIndicatorState />
    </DocsSection>

    <DocsSection Title="Two-way data binding">
        <p>
            Use the <code>@@bind-Expanded</code> directive,
            or the <code>Expanded</code> and <code>ExpandedChanged</code> parameters,
            to control the accordion’s expanded state.
        </p>
        <TwoWayDataBinding />
    </DocsSection>
</DocsSection>

<DocsSlotsSection Slots="@_slots">
    <div>
        <h4 class="font-semibold">Accordion</h4>
        <ul>
            <li><code>Class</code>: The basic CSS class name styles the wrapper of the accordion items.</li>
            <li><code>ItemClasses</code>: The CSS class names for the accordion items slots style all the accordion items at once.</li>
        </ul>
    </div>
    <div>
        <h4 class="font-semibold">Accordion Item</h4>
        <ul>
            <li><code>Class</code>: The basic CSS class name styles the wrapper of the accordion item.</li>
            <li><code>Classes</code>: The CSS class names for the accordion item slots style the entire accordion item at once.</li>
        </ul>
    </div>
    <CustomStyles />
</DocsSlotsSection>

<DocsApiSection Components="@_apiComponents" />

@code {
    [CascadingParameter] private DocsContentLayout Layout { get; set; } = default!;

    private readonly CompositionComponent[] _compositionComponents = new CompositionComponent[]
    {
        new(nameof(LumexAccordion), "The container that holds collapsible sections."),
        new(nameof(LumexAccordionItem), "The individual collapsible section within the accordion.")
    };

    private readonly Heading[] _headings = new Heading[]
    {
        new("Composition"),
        new("Usage", [
            new("Disabled"),
            new("Expanded"),
            new("Multiple"),
            new("Variants"),
            new("Subtitle"),
            new("Start content"),
            new("Custom indicator"),
            new("Two-way data binding"),
        ]),
        new("Custom styles"),
        new("API")
    };

    private readonly Slot[] _slots = new Slot[]
    {
        new(nameof(AccordionItemSlots.Base), "The overall container of the accordion item."),
        new(nameof(AccordionItemSlots.Heading), "The wrappper of the header section that includes the trigger."),
        new(nameof(AccordionItemSlots.Trigger), "The element that toggles the accordion open or closed."),
        new(nameof(AccordionItemSlots.TitleWrapper), "The wrappper of both the title and subtitle of the accordion item."),
        new(nameof(AccordionItemSlots.Title), "The main title of the accordion item."),
        new(nameof(AccordionItemSlots.Subtitle), "The secondary text beneath the title."),
        new(nameof(AccordionItemSlots.StartContent), "The content, such as icons, placed at the start of the accordion item."),
        new(nameof(AccordionItemSlots.Indicator), "The icon that indicates the accordion item’s expanded or collapsed state."),
        new(nameof(AccordionItemSlots.Content), "The wrappper of the body content of the accordion item.")
    };

    private readonly string[] _apiComponents = new string[]
    {
        nameof(LumexAccordion),
        nameof(LumexAccordionItem)
    };

    protected override void OnInitialized()
    {
        Layout.Initialize(
            title: "Accordion",
            category: "Components",
            description: "Accordions present a list of top-level options that can expand or collapse to display additional details.",
            headings: _headings,
            linksProps: new ComponentLinksProps( "Accordion", isServer: false )
        );
    }
}

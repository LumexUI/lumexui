@page "/docs/theming/customization"
@layout DocsContentLayout

<p>
    LumexUI provides a flexible, CSS-first theming system that lets you customize component styling through global CSS variables. 
    These variables can be overridden globally or scoped to specific themes using selectors such as classes or data attributes.
</p>

<DocsSection Title="Global theme">
    <p>
        To override the default design tokens globally, define your CSS variables inside the <code>:root</code> selector.
        These values will apply to the entire application.
    </p>
    <p>CSS variables inside the <code>:root</code> selector represent the light theme.</p>

    <CodeSnippet Code="@(new CodeBlock( name: "globals.css", snippet: "customizationGlobal" ))" />

    <Preview>
        <div class="w-full flex items-center justify-center gap-4">
            <LumexButton>Default button</LumexButton>

            <div class="theme-example-global">
                <LumexButton>Custom button</LumexButton>
            </div>
        </div>
    </Preview>
</DocsSection>

<DocsSection Title="Custom themes">
    <p>
        Custom themes can be defined using CSS selectors such as classes or data attributes. 
        Components within elements that match these selectors will automatically use the overridden variables.
    </p>
    <p>As an example, a custom theme named <i>orange</i> can be created by defining these CSS variables:</p>

    <CodeSnippet Code="@(new CodeBlock( name: "orange.css", snippet: "customizationCustom" ))" />

    <p>Applying a theme at runtime can be done by toggling the class on a wrapper element like <code>@("<html>")</code> or <code>@("<body>")</code>.</p>

    <CodeSnippet Code="@(new CodeBlock( name: "App.razor", snippet: "customizationToggle" ))" />
    <CustomThemesPreview />
</DocsSection>

@code {
    [CascadingParameter] private DocsContentLayout Layout { get; set; } = default!;

    private readonly Heading[] _headings = new Heading[]
    {
        new("Global theme"),
        new("Custom themes")
    };

    protected override void OnInitialized()
    {
        Layout.Initialize(
            title: "Customization",
            category: "Theming",
            description: "Customizing the default theme using CSS variables.",
            _headings
        );
    }
}

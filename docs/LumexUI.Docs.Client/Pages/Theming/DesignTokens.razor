@page "/docs/theming"
@page "/docs/theming/design-tokens"
@layout DocsContentLayout

<p>
    LumexUI uses CSS variables as design tokens to enable easy, consistent customization of your UI.
    These variables are applied globally and consumed by all components for layout, color, and typography styling.
</p>

<DocsSection Title="Convention">
    <p>
        We use a simple <code>background</code> and <code>foreground</code> convention for <LumexLink Href="/docs/theming/design-tokens#colors">colors</LumexLink>.
        The <code>background</code> variable is used for the background color of the component
        and the <code>foreground</code> variable is used for the text color.
    </p>

    <LumexAlert Radius="@Radius.Large">
        <DescriptionContent>
            The <code>background</code> suffix is omitted when the variable is used for the background color of the component.
        </DescriptionContent>
    </LumexAlert>

    <p>Given the following CSS variables:</p>

    <CodeSnippet Code="@(new CodeBlock( name: null, snippet: "designTokensConventionCss" ))" />

    <p>
        The <code>background</code> color of the following component will be <code>var(--lumex-primary)</code>
        and the <code>foreground</code> color will be <code>var(--lumex-primary-foreground)</code>.
    </p>

    <CodeSnippet Code="@(new CodeBlock( name: null, snippet: "designTokensConventionHtml" ))" />

    <p>
        For <LumexLink Href="/docs/theming/design-tokens#layout">layout</LumexLink> CSS variables, we follow the
        <LumexLink Href="https://tailwindcss.com/docs/theme" External="@true">Tailwind CSS convention</LumexLink>
        but add a <code>lumex-</code> prefix.
    </p>
</DocsSection>

<DocsSection Title="Layout">
    <p>Tokens related to typography, border radius, shadows, and opacity.</p>

    <CodeSnippet Code="@(new CodeBlock( name: "globals.css", snippet: "designTokensLayout" ))" />
</DocsSection>

<DocsSection Title="Colors">
    <p>
        These tokens represent semantic colors used throughout LumexUI components
        and are designed to adapt dynamically based on the applied theme.
    </p>
    <p>
        The color tokens are based on
        <LumexLink Href="https://tailwindcss.com/docs/colors"
                   External="@true">
            Tailwind CSS’s default palette
        </LumexLink>
        — for example, <code>zinc</code> for default, <code>blue</code> for primary, <code>rose</code> for danger, etc.
    </p>

    <ColorSwatches />
    <CodeSnippetCollapsible Code="@(new CodeBlock( name: "globals.css", snippet: "designTokensColors" ))" />
</DocsSection>

<DocsSection Title="Themes reference">
    <p>Here's the full list of variables available for customization:</p>

    <CodeSnippetCollapsible Code="@(new CodeBlock( name: "globals.css", snippet: "designTokensThemesRef" ))" />
</DocsSection>

@code {
    [CascadingParameter] private DocsContentLayout Layout { get; set; } = default!;

    private readonly Heading[] _headings = new Heading[]
    {
        new("Convention"),
        new("Layout"),
        new("Colors"),
        new("Themes reference"),
    };

    protected override void OnInitialized()
    {
        Layout.Initialize(
            title: "Design Tokens",
            category: "Theming",
            description: "Using CSS Variables and color utilities for theming.",
            _headings
        );
    }
}

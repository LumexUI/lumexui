@namespace LumexUI.Tests.Components
@inherits TestContext

@using Microsoft.AspNetCore.Components.Web
@using TailwindMerge
@using LumexUI.Common
@using Microsoft.Extensions.DependencyInjection

@code {
    public TextBoxTests()
    {
        Services.AddSingleton<TwMerge>();
    }

    [Fact]
    public void ShouldRenderCorrectly()
    {
        var action = () => Render(@<LumexTextBox Label="Test" />);

        action.Should().NotThrow();
    }

    [Fact]
    public void ShouldRenderMainWrapperWhenLabelOutside()
    {
        var cut = Render(@<LumexTextBox Label="Test" LabelPlacement="@LabelPlacement.Outside" />);

        cut.Find( "[data-slot=main-wrapper]" ).Should().NotBeNull();
    }

    [Fact]
    public void ShouldRenderHelperWrapperWhenDescriptionProvided()
    {
        var cut = Render(@<LumexTextBox Label="Test" Description="Test description" />);

        cut.Find( "[data-slot=helper-wrapper]" ).Should().NotBeNull();
        cut.Find( "[data-slot=description]" ).Should().NotBeNull();
    }

    [Fact]
    public void ShouldRenderHelperWrapperWhenErrorMessageProvided()
    {
        var cut = Render(@<LumexTextBox Label="Test" ErrorMessage="Test error message" />);
        var action = () => cut.Find( "[data-slot=error-message]" );

        cut.Find( "[data-slot=helper-wrapper]" ).Should().NotBeNull();
        action.Should().Throw<ElementNotFoundException>( because: "Error message should be rendered when state is invalid." );
    }

    [Fact]
    public void ShouldRenderErrorMessageWhenInvalid()
    {
        var cut = Render(@<LumexTextBox Label="Test" ErrorMessage="Test error message" Invalid="@true" />);

        cut.Find( "[data-slot=error-message]" ).Should().NotBeNull();
    }

    [Fact]
    public void ShouldHaveDisabledAttributeWhenDisabled()
    {
        var cut = Render(@<LumexTextBox Label="Test" Disabled="@true" />);

        var input = cut.Find( "input" );

        input.HasAttribute( "disabled" ).Should().BeTrue();
    }

    [Fact]
    public void ShouldHaveCorrectTypeAttribute()
    {
        var cut = Render(@<LumexTextBox Label="Test" Type="@InputType.Text" />);

        var input = cut.Find( "input" );

        input.HasAttribute( "type" ).Should().BeTrue();
        input.GetAttribute( "type" ).Should().Be( "text" );

        var cut2 = Render(@<LumexTextBox Label="Test" Type="@InputType.Number" />);

        var input2 = cut2.Find( "input" );

        input2.GetAttribute( "type" ).Should().Be( "number" );

        var cut3 = Render(@<LumexTextBox Label="Test" Type="@InputType.Telephone" />);

        var input3 = cut3.Find( "input" );

        input3.GetAttribute( "type" ).Should().Be( "tel" );

        var cut4 = Render(@<LumexTextBox Label="Test" Type="@InputType.Email" />);

        var input4 = cut4.Find( "input" );

        input4.GetAttribute( "type" ).Should().Be( "email" );

        var cut5 = Render(@<LumexTextBox Label="Test" Type="@InputType.Password" />);

        var input5 = cut5.Find( "input" );

        input5.GetAttribute( "type" ).Should().Be( "password" );

        var cut6 = Render(@<LumexTextBox Label="Test" Type="@InputType.Search" />);

        var input6 = cut6.Find( "input" );

        input6.GetAttribute( "type" ).Should().Be( "search" );
    }

    [Fact]
    public void ShouldRenderClearButtonWhenClearableAndHasValue()
    {
        var cut = Render(
            @<LumexTextBox Label="Test" Clearable="@true" Value="test" />);

        var clearButton = cut.Find( "[role=button]" );

        clearButton.Should().NotBeNull();
    }

    [Fact]
    public void ShouldClearValueOnClickWhenClearable()
    {
        var cut = Render<LumexTextBox>(
            @<LumexTextBox Label="Test" Clearable="@true" Value="test" />);

        var clearButton = cut.Find( "[role=button]" );
        clearButton.Click();

        cut.Instance.Value.Should().BeNullOrEmpty();
    }

    [Theory]
    [InlineData( "Enter" )]
    [InlineData( "Space" )]
    public void ShouldClearValueOnlyWithEnterOrSpaceWhenClearable( string code )
    {
        var cut = Render<LumexTextBox>(
            @<LumexTextBox Label="Test" Clearable="@true" Value="test" />);

        var clearButton = cut.Find( "[role=button]" );

        clearButton.KeyUp( new KeyboardEventArgs() { Code = "Esc" } );
        cut.Instance.Value.Should().Be( "test" );

        clearButton.KeyUp( new KeyboardEventArgs() { Code = code } );
        cut.Instance.Value.Should().BeNullOrEmpty();
    }

    [Fact]
    public void ShouldTriggerOnClearedCallbackOnClear()
    {
        var isCleared = false;
        var cut = Render<LumexTextBox>(
            @<LumexTextBox Label="Test" Clearable="@true" OnCleared="@(() => isCleared = true)" Value="test" />);

        var clearButton = cut.Find( "[role=button]" );
        clearButton.Click();

        isCleared.Should().BeTrue();
        cut.Instance.Value.Should().BeNullOrEmpty();
    }

    [Fact]
    public void ShouldFocusInputOnInputWrapperClick()
    {
        var cut = Render(@<LumexTextBox Label="Test" />);

        var baseWrapper = cut.Find( "[data-slot=base]" );
        var inputWrapper = cut.Find( "[data-slot=input-wrapper]" );
        inputWrapper.Click();

        baseWrapper.GetAttribute( "data-focus" ).Should().Be( "true", because: "Internal `Focused` flag is true." );
    }

    [Theory]
    [InlineData( true, false )]
    [InlineData( false, true )]
    public void ShouldNotFocusInputWhenDisabledOrReadonly( bool disabled, bool @readonly )
    {
        var cut = Render(
            @<LumexTextBox Label="Test" Disabled="@disabled" ReadOnly="@(@readonly)" />);

        var baseWrapper = cut.Find( "[data-slot=base]" );
        var inputWrapper = cut.Find( "[data-slot=input-wrapper]" );
        inputWrapper.Click();

        baseWrapper.GetAttribute( "data-focus" ).Should().Be( "false", because: "Internal `Focused` flag is false." );
    }

    [Fact]
    public void ShouldChangeValueUsingInputEventWhenBehaviorOnInput()
    {
        var cut = Render<LumexTextBox>(
            @<LumexTextBox Label="Test" Behavior="@InputBehavior.OnInput" />);

        var input = cut.Find( "input" );

        input.Input( "test 1" );
        cut.Instance.Value.Should().Be( "test 1" );

        input.Change( "test 2" );
        cut.Instance.Value.Should().Be( "test 1" );
    }

    [Fact]
    public void ShouldChangeValueUsingChangeEventWhenBehaviorOnChange()
    {
        var cut = Render<LumexTextBox>(
            @<LumexTextBox Label="Test" Behavior="@InputBehavior.OnChange" />);

        var input = cut.Find( "input" );

        input.Change( "test 1" );
        cut.Instance.Value.Should().Be( "test 1" );

        input.Input( "test 2" );
        cut.Instance.Value.Should().Be( "test 1" );
    }

    [Fact]
    public void ShouldChangeValueImmediatelyWhenBehaviorOnInput()
    {
        var cut = Render<LumexTextBox>(
            @<LumexTextBox Label="Test" Behavior="@InputBehavior.OnInput" />);

        var input = cut.Find( "input" );
        input.Input( "test" );

        cut.Instance.Value.Should().Be( "test", because: "Debounce delay is 0ms." );
    }

    [Fact]
    public async Task ShouldChangeValueAfterDebounceDelayWhenBehaviorOnInput()
    {
        var cut = Render<LumexTextBox>(
            @<LumexTextBox Label="Test" Behavior="@InputBehavior.OnInput" DebounceDelay="200" />);

        var input = cut.Find( "input" );
        input.Input( "test" );

        cut.Instance.Value.Should().BeNullOrEmpty( because: "Elapsed time (0ms) < 200ms." );

        await Task.Delay( 100 );
        cut.Instance.Value.Should().BeNullOrEmpty( because: "Elapsed time (100ms) < 200ms." );

        await Task.Delay( 150 );
        cut.WaitForAssertion( () => cut.Instance.Value.Should().Be( "test", because: "Elapsed time (250ms) > 200ms." ) );
    }

    [Fact]
    public void ShouldThrowWithDebounceDelayAndOnChangeBehavior()
    {
        var action = () => Render(
            @<LumexTextBox Label="Test" Behavior="@InputBehavior.OnChange" DebounceDelay="200" />);

        action.Should().Throw<InvalidOperationException>();
    }
}

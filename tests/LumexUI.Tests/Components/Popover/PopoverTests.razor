@namespace LumexUI.Tests.Components
@inherits TestContext

@using LumexUI.Common
@using LumexUI.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.DependencyInjection
@using TailwindMerge

@code {
    public PopoverTests()
    {
        Services.AddSingleton<TwMerge>();
        Services.AddSingleton<IPopoverService, PopoverService>();

        var module = JSInterop.SetupModule( "./_content/LumexUI/js/components/popover.bundle.js" );
        module.SetupVoid( "popover.initialize", _ => true );
        module.SetupVoid( "popover.destroy", _ => true );
    }

    [Fact]
    public void ShouldRenderCorrectly()
    {
        var action = () => Render<LumexPopover>(
    @<LumexPopover>
        <LumexPopoverTrigger>Show Popover</LumexPopoverTrigger>
        <LumexPopoverContent>
            <p>This is the content of the popover.</p>
        </LumexPopoverContent>
    </LumexPopover>
    );

        action.Should().NotThrow();
    }

    [Fact]
    public void ShouldShowOnTrigger()
    {
        var cut = Render<LumexPopover>(
    @<LumexPopover>
        <LumexPopoverTrigger>Show Popover</LumexPopoverTrigger>
        <LumexPopoverContent>
            <p>This is the content of the popover.</p>
        </LumexPopoverContent>
    </LumexPopover>
        );

        var popoverTrigger = cut.FindComponent<LumexPopoverTrigger>();
        var triggerButton = popoverTrigger.Find( "button" );

        cut.Instance.IsShown.Should().BeFalse( because: "An initial state" );

        triggerButton.Click();

        cut.Instance.IsShown.Should().BeTrue( because: "The trigger is clicked" );
    }

    [Fact]
    public void ShouldHideOnOutsideClick()
    {
        var cut = Render<LumexPopover>(
    @<LumexPopover>
        <LumexPopoverTrigger>Show Popover</LumexPopoverTrigger>
        <LumexPopoverContent>
            <p>This is the content of the popover.</p>
        </LumexPopoverContent>
    </LumexPopover>
    );

        var popoverTrigger = cut.FindComponent<LumexPopoverTrigger>();
        var triggerButton = popoverTrigger.Find( "button" );

        cut.Instance.IsShown.Should().BeFalse( because: "An initial state" );

        triggerButton.Click();

        cut.Instance.IsShown.Should().BeTrue( because: "The trigger is clicked" );

        cut.Find( "[data-popover]" ).TriggerEvent( "onclickoutside", new EventArgs() );

        cut.Instance.IsShown.Should().BeFalse( because: "An outside click occured" );
    }

    [Fact]
    public void ShouldNotShowOnTriggeringShownOne()
    {
        var cut = Render<LumexPopover>(
    @<LumexPopover>
        <LumexPopoverTrigger>Show Popover</LumexPopoverTrigger>
        <LumexPopoverContent>
            <p>This is the content of the popover.</p>
        </LumexPopoverContent>
    </LumexPopover>
        );

        var popoverTrigger = cut.FindComponent<LumexPopoverTrigger>();
        var triggerButton = popoverTrigger.Find( "button" );

        cut.Instance.IsShown.Should().BeFalse( because: "An initial state" );

        triggerButton.Click();

        cut.Instance.IsShown.Should().BeTrue( because: "The trigger is clicked" );

        // Triggering the opened popover also triggers the 'clickoutside' event first
        cut.Find( "[data-popover]" ).TriggerEvent( "onclickoutside", new EventArgs() );
        triggerButton.Click();

        cut.Instance.IsShown.Should().BeFalse( because: "An outside click occured" );
    }

    [Fact]
    public void ShouldHidePopoverWhenOpeningAnotherOne()
    {
        var cut = Render(
    @<text>
        <LumexPopover>
            <LumexPopoverTrigger>Show Popover</LumexPopoverTrigger>
            <LumexPopoverContent>
                <p>This is the content of the popover.</p>
            </LumexPopoverContent>
        </LumexPopover>
        <LumexPopover>
            <LumexPopoverTrigger>Show Popover 2</LumexPopoverTrigger>
            <LumexPopoverContent>
                <p>This is the content of the popover.</p>
            </LumexPopoverContent>
        </LumexPopover>
    </text>
        );

        var popovers = cut.FindComponents<LumexPopover>();
        var popoverTriggers = cut.FindComponents<LumexPopoverTrigger>();

        popoverTriggers[0].Find( "button" ).Click();

        popovers[0].Instance.IsShown.Should().BeTrue();
        popovers[1].Instance.IsShown.Should().BeFalse();

        // Triggering the 2nd popover also triggers the 'clickoutside' event first
        popovers[0].Find( "[data-popover]" ).TriggerEvent( "onclickoutside", new EventArgs() );
        popoverTriggers[1].Find( "button" ).Click();

        popovers[0].Instance.IsShown.Should().BeFalse();
        popovers[1].Instance.IsShown.Should().BeTrue();
    }

    [Fact]
    public void ShouldShowArrow()
    {
        var cut = Render<LumexPopover>(
    @<LumexPopover ShowArrow="@true">
        <LumexPopoverTrigger>Show Popover</LumexPopoverTrigger>
        <LumexPopoverContent>
            <p>This is the content of the popover.</p>
        </LumexPopoverContent>
    </LumexPopover>
    );

        var popoverTrigger = cut.FindComponent<LumexPopoverTrigger>();
        var triggerButton = popoverTrigger.Find( "button" );

        triggerButton.Click();

        cut.Find( "[data-slot=arrow]" ).Should().NotBeNull();
    }
}

@namespace LumexUI.Tests.Components
@inherits TestContext

@using LumexUI.Common
@using LumexUI.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.DependencyInjection
@using TailwindMerge

@code {
    public PopoverTests()
    {
        Services.AddSingleton<TwMerge>();
        Services.AddSingleton<IPopoverService, PopoverService>();

        var module = JSInterop.SetupModule( "./_content/LumexUI/js/components/popover.bundle.js" );
        module.SetupVoid( "popover.initialize", _ => true );
        module.SetupVoid( "popover.destroy", _ => true );
    }

    [Fact]
    public void ShouldRenderCorrectly()
    {
        var id = "1";
        var action = () => Render(
            @<text>
                <LumexButton OnClick="@(() => TriggerAsync( id ))" data-popoverref="@id">
                    Trigger
                </LumexButton>
                <LumexPopover Id="@id">
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
        );

        action.Should().NotThrow();
    }

    [Fact]
    public void ShouldOpenOnTriggerClick()
    {
        var id = "2";
        var cut = Render(
            @<text>
                <LumexButton OnClick="@(() => TriggerAsync( id ))" data-popoverref="@id">
                    Trigger
                </LumexButton>
                <LumexPopover Id="@id">
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
        );

        var trigger = cut.Find( "[data-popoverref]" );
        trigger.Click();

        var popover = cut.FindBySlot( "base" );
        popover?.GetAttribute("data-open").Should().Be( "true" );
    }

    [Fact]
    public void ShouldCloseOnOutsideClick()
    {
        var id = "3";
        var cut = Render(
            @<text>
                <LumexButton OnClick="@(() => TriggerAsync( id ))" data-popoverref="@id">
                    Trigger
                </LumexButton>
                <LumexPopover Id="@id" Open="@true">
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
        );

        cut.Find( "[data-popover]" ).TriggerEvent( "onclickoutside", new EventArgs() );

        var popover = cut.FindBySlot( "base" );
        popover?.GetAttribute( "data-open" ).Should().Be( "false" );
    }

    [Fact]
    public void ShouldShowArrow()
    {
        var id = "4";
        var cut = Render(
            @<text>
                <LumexButton OnClick="@(() => TriggerAsync( id ))" data-popoverref="@id">
                    Trigger
                </LumexButton>
                <LumexPopover Id="@id" ShowArrow="@true">
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
         );

        var trigger = cut.Find( "[data-popoverref]" );
        trigger.Click();

        cut.FindBySlot( "arrow" ).Should().NotBeNull();
    }

    private Task TriggerAsync( string id )
    {
        var popoverService = Services.GetRequiredService<IPopoverService>();
        return popoverService.TriggerAsync( id );
    }
}

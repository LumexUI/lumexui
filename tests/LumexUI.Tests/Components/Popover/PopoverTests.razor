@namespace LumexUI.Tests.Components
@inherits TestContext

@code {
    public PopoverTests()
    {
        Services.AddSingleton<TwMerge>();

        var module = JSInterop.SetupModule( "./_content/LumexUI/js/components/popover.bundle.js" );
        module.SetupVoid( "popover.initialize", _ => true );
        module.SetupVoid( "popover.destroy", _ => true );
    }

    [Fact]
    public void ShouldRenderCorrectly()
    {
        var action = () => Render(
            @<text>
                <LumexPopover>
                    <LumexPopoverTrigger>
                        <LumexButton>Open Popover</LumexButton>
                    </LumexPopoverTrigger>
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
        );

        action.Should().NotThrow();
    }

    [Fact]
    public void ShouldThrowIfTriggerDoesNotHaveChildContent()
    {
        var action = () => Render(
            @<text>
                <LumexPopover>
                    <LumexPopoverTrigger></LumexPopoverTrigger>
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
        );

        action.Should().Throw<InvalidOperationException>();
    }

    [Fact]
    public void ShouldOpenOnTriggerClick()
    {
        var cut = Render(
            @<text>
                <LumexPopover>
                    <LumexPopoverTrigger>
                        <LumexButton>Open Popover</LumexButton>
                    </LumexPopoverTrigger>
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
        );

        var trigger = cut.Find( "[data-popovertarget]" );
        trigger.Click();

        var popover = cut.FindBySlot( "base" );
        popover?.GetAttribute("data-open").Should().Be( "true" );
    }

    [Fact]
    public void ShouldCloseOnOutsideClick()
    {
        var cut = Render(
            @<text>
                <LumexPopover Open="@true">
                    <LumexPopoverTrigger>
                        <LumexButton>Open Popover</LumexButton>
                    </LumexPopoverTrigger>
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
        );

        var overlay = cut.Find( "[data-popover-overlay]" );
        overlay?.Click();

        cut.FindBySlot( "base" )?.GetAttribute( "data-open" ).Should().Be( "false" );
    }

    [Fact]
    public void ShouldShowArrow()
    {
        var cut = Render(
            @<text>
                <LumexPopover ShowArrow="@true">
                    <LumexPopoverTrigger>
                        <LumexButton>Open Popover</LumexButton>
                    </LumexPopoverTrigger>
                    <LumexPopoverContent>
                        <p>This is the content of the popover.</p>
                    </LumexPopoverContent>
                </LumexPopover>
            </text>
         );

        var trigger = cut.Find( "[data-popovertarget]" );
        trigger.Click();

        cut.FindBySlot( "arrow" ).Should().NotBeNull();
    }
}

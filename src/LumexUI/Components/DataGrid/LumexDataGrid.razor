@namespace LumexUI
@inherits LumexComponentBase
@typeparam T

@using LumexUI.DataGrid.Core

<CascadingValue TValue="DataGridContext<T>" Value="@_context" IsFixed="@true">
    @{
        StartCollectingColumns();
    }

    @if( SelectionMode is not SelectionMode.None )
    {
        <_CheckboxColumn T="T" data-id="@Identifier.New()" />
    }

    @ChildContent

    <Defer>
        @{
            FinishCollectingColumns();
        }
        <_ColumnsCollectedNotifier T="T" />

        <div class="@_slots.Base" style="@RootStyle" @attributes="@AdditionalAttributes">
            <div class="@_slots.Wrapper">
                <table class="@_slots.Table">
                    <thead class="@_slots.Thead">
                        <tr class="@_slots.Tr">
                            @_renderColumnHeaders
                        </tr>
                    </thead>
                    <tbody class="@_slots.Tbody">
                        @if( Data is null || !Data.Any() )
                        {
                            @_renderEmptyContent
                        }
                        else
                        {
                            @_renderNonVirtualizedRows
                        }

                        @if( Loading || _pendingDataLoadCts is not null )
                        {
                            @_renderLoadingContent
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </Defer>
</CascadingValue>

@code {
    private void RenderNonVirtualizedRows( RenderTreeBuilder __builder )
    {
        var initialRowIndex = 2; // aria-rowindex is 1-based, plus the first row is the header
        var rowIndex = initialRowIndex;
        foreach( var item in _currentNonVirtualizedItems )
        {
            RenderRow( __builder, rowIndex++, item );
        }
    }

    private void RenderRow( RenderTreeBuilder __builder, int rowIndex, T item )
    {
        var selected = Utils.GetDataAttributeValue( SelectedItems.Contains( item ) );

        <tr class="@_slots.Tr"
            aria-rowindex="@rowIndex"
            aria-selected="@selected"
            @key="@item"
            @onclick="@(() => OnRowClickedAsync( item, rowIndex ))"
            @onclick:stopPropagation="@true">
            @foreach( var col in _columns )
            {
                <td class="@_slots.Td"
                    data-selected="@selected"
                    @key="@col">
                    @{
                        col.RenderCellContent( __builder, item );
                    }
                </td>
            }
        </tr>
    }

    private void RenderColumnHeaders( RenderTreeBuilder __builder )
    {
        foreach( var col in _columns )
        {
            <th class="@_slots.Th" scope="col" @key="@col">
                @{
                    col.RenderHeaderCellContent( __builder );
                }
            </th>
        }
    }

    private void RenderLoadingContent( RenderTreeBuilder __builder )
    {
        <tr>
            <td class="@_slots.LoadingWrapper" colspan="@(_columns.Count)">
                @if( LoadingContent is not null )
                {
                    @LoadingContent
                }
                else
                {
                    <text>Loading...</text>
                }
            </td>

            @if( Data is null || !Data.Any() )
            {
                <td class="@_slots.EmptyWrapper" />
            }
        </tr>
    }

    private void RenderEmptyContent( RenderTreeBuilder __builder )
    {
        <tr>
            <td class="@_slots.EmptyWrapper" colspan="@(_columns.Count)">
                @if( EmptyContent is not null )
                {
                    @EmptyContent
                }
                else
                {
                    <text>No records available.</text>
                }
            </td>
        </tr>
    }
}
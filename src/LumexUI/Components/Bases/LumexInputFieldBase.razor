@namespace LumexUI
@inherits LumexDebouncedInputBase<TValue>
@typeparam TValue

<LumexComponent As="@As"
                Class="@RootClass"
                Style="@RootStyle"
                data-slot="base"
                data-invalid="@Utils.GetDataAttributeValue( Invalid )"
                data-disabled="@Utils.GetDataAttributeValue( Disabled )"
                data-readonly="@Utils.GetDataAttributeValue( ReadOnly )"
                data-required="@Utils.GetDataAttributeValue( Required )"
                data-focus="@Utils.GetDataAttributeValue( Focused )"
                data-filled-focused="@Utils.GetDataAttributeValue( FilledOrFocused )"
                data-hidden="@Utils.GetDataAttributeValue( _inputType is "hidden" )">
    @_renderMainWrapper
</LumexComponent>

@code {
    private void RenderMainWrapper( RenderTreeBuilder __builder )
    {
        if( LabelPlacement is LabelPlacement.Outside )
        {
            <div class="@MainWrapperClass" data-slot="main-wrapper">
                @_renderInputWrapper
                @_renderHelperWrapper
            </div>
        }
        else
        {
            @_renderInputWrapper
            @_renderHelperWrapper
        }
    }

    private void RenderInputWrapper( RenderTreeBuilder __builder )
    {
        <div class="@InputWrapperClass"
             data-slot="input-wrapper"
             @onclick="@FocusInputAsync">

            @if( !string.IsNullOrEmpty( Label ) )
            {
                <label class="@LabelClass" data-slot="label">@Label</label>
            }

            <div class="@InnerWrapperClass"
                 data-slot="inner-wrapper"
                 data-has-clear-button="@Utils.GetDataAttributeValue( ClearButtonVisible )">
                @StartContent

                <input type="@_inputType"
                       class="@InputClass"
                       value="@CurrentValueAsString"
                       placeholder="@Placeholder"
                       disabled="@Disabled"
                       readonly="@ReadOnly"
                       required="@Required"
                       data-slot="input"
                       data-filled="@Utils.GetDataAttributeValue( HasValue )"
                       data-has-start-content="@Utils.GetDataAttributeValue( StartContent is not null )"
                       data-has-end-content="@Utils.GetDataAttributeValue( EndContent is not null )"
                       @ref="@ElementReference"
                       @attributes="@AdditionalAttributes"
                       @onchange="@OnChangeAsync"
                       @oninput="@OnInputAsync"
                       @onfocus="@OnFocusAsync"
                       @onblur="@OnBlurAsync" />

                @EndContent

                @if( ClearButtonVisible )
                {
                    <span role="button"
                          class="@ClearButtonClass"
                          tabindex="0"
                          data-slot="clear-button"
                          @onclick="@ClearAsync"
                          @onkeyup="@ClearAsync">
                        <LumexIcon Icon="@Icons.Rounded.Cancel"
                                   Size="@new("1em")"
                                   Color="@ThemeColor.Default" />
                    </span>
                }
            </div>
        </div>
    }

    private void RenderHelperWrapper( RenderTreeBuilder __builder )
    {
        if( !HasHelper )
        {
            return;
        }

        <div class="@HelperWrapperClass" data-slot="helper-wrapper">
            @if( Invalid && ( !string.IsNullOrEmpty( ErrorMessage ) || !string.IsNullOrEmpty( ValidationMessage ) ) )
            {
                <div class="@ErrorMessageClass" data-slot="error-message">
                    @if( !string.IsNullOrEmpty( ErrorMessage ) )
                    {
                        @ErrorMessage
                    }
                    else
                    {
                        @ValidationMessage
                    }
                </div>
            }
            else if( !string.IsNullOrEmpty( Description ) )
            {
                <div class="@DescriptionClass" data-slot="description">
                    @Description
                </div>
            }
        </div>
    }
}
